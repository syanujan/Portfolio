```python
import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import seaborn as sns
import datetime
```


```python
df = pd.read_csv('/content/Tomato.csv')

df.head()

#Date: Cost data from respective dates ranging from 2013-2021
#Unit: The costs based on the unit of weight for tomatos, kilograms
#Minimum: The minimum recorded sale price for a kg for tomatoes each day
#Maximum: The maximum recorded sale price for a kg of tomatoes each day
#Average: Average sale price of tomato recorded each day
#Market: Tomato (the product for which prices are being tracked)
```





  <div id="df-cba76011-7f87-40b9-8597-75dfa2a08479">
    <div class="colab-df-container">
      <div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Date</th>
      <th>Unit</th>
      <th>Minimum</th>
      <th>Maximum</th>
      <th>Average</th>
      <th>Market</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2013-06-16</td>
      <td>Kg</td>
      <td>26</td>
      <td>32</td>
      <td>29.0</td>
      <td>Tomato</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2013-06-17</td>
      <td>Kg</td>
      <td>20</td>
      <td>25</td>
      <td>22.5</td>
      <td>Tomato</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2013-06-18</td>
      <td>Kg</td>
      <td>22</td>
      <td>26</td>
      <td>24.0</td>
      <td>Tomato</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2013-06-19</td>
      <td>Kg</td>
      <td>24</td>
      <td>28</td>
      <td>26.0</td>
      <td>Tomato</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2013-06-20</td>
      <td>Kg</td>
      <td>22</td>
      <td>26</td>
      <td>24.0</td>
      <td>Tomato</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-cba76011-7f87-40b9-8597-75dfa2a08479')"
              title="Convert this dataframe to an interactive table."
              style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"/>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/>
  </svg>
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-cba76011-7f87-40b9-8597-75dfa2a08479 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-cba76011-7f87-40b9-8597-75dfa2a08479');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>





```python
df.info()
```

    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 2741 entries, 0 to 2740
    Data columns (total 6 columns):
     #   Column   Non-Null Count  Dtype  
    ---  ------   --------------  -----  
     0   Date     2741 non-null   object 
     1   Unit     2741 non-null   object 
     2   Minimum  2741 non-null   int64  
     3   Maximum  2741 non-null   int64  
     4   Average  2741 non-null   float64
     5   Market   2741 non-null   object 
    dtypes: float64(1), int64(2), object(3)
    memory usage: 128.6+ KB
    


```python
df.isnull().sum()
```




    Date       0
    Unit       0
    Minimum    0
    Maximum    0
    Average    0
    Market     0
    dtype: int64




```python
# Add new columns that indicates what season a month is and if the time is before or during pandemic
# make a new column and assign values based on -> (1- spring, 2-summer, 3-fall, 4-winter)
def getSeasonFromMonth(x):
  x = x.month
  if x in [12, 1, 2]:
    return '4'
  elif x in [3, 4, 5]:
    return '1'
  elif x in [6, 7, 8]:
    return '2'
  else:
    return '3'

new_column = pd.to_datetime(df['Date'], format='%Y-%m-%d')
df['year'] = pd.DatetimeIndex(df['Date']).year
df['season'] = new_column.apply(lambda x: getSeasonFromMonth(x))
df

# (0-non-pandemic, 1-pandemic)
df['pandemic'] = None
df.loc[df['Date'] < '2020-03-21', 'pandemic'] = '0'
df.loc[df['Date'] >= '2020-03-21', 'pandemic'] = '1'
df

# drop Market
df = df.drop('Market', axis=1)
df
```





  <div id="df-2eb6c263-93aa-493a-a2d8-ff5e7d243ec5">
    <div class="colab-df-container">
      <div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Date</th>
      <th>Unit</th>
      <th>Minimum</th>
      <th>Maximum</th>
      <th>Average</th>
      <th>year</th>
      <th>season</th>
      <th>pandemic</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2013-06-16</td>
      <td>Kg</td>
      <td>26</td>
      <td>32</td>
      <td>29.0</td>
      <td>2013</td>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2013-06-17</td>
      <td>Kg</td>
      <td>20</td>
      <td>25</td>
      <td>22.5</td>
      <td>2013</td>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2013-06-18</td>
      <td>Kg</td>
      <td>22</td>
      <td>26</td>
      <td>24.0</td>
      <td>2013</td>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2013-06-19</td>
      <td>Kg</td>
      <td>24</td>
      <td>28</td>
      <td>26.0</td>
      <td>2013</td>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2013-06-20</td>
      <td>Kg</td>
      <td>22</td>
      <td>26</td>
      <td>24.0</td>
      <td>2013</td>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2736</th>
      <td>2021-05-09</td>
      <td>Kg</td>
      <td>10</td>
      <td>15</td>
      <td>12.5</td>
      <td>2021</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2737</th>
      <td>2021-05-10</td>
      <td>Kg</td>
      <td>10</td>
      <td>15</td>
      <td>12.5</td>
      <td>2021</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2738</th>
      <td>2021-05-11</td>
      <td>Kg</td>
      <td>10</td>
      <td>15</td>
      <td>12.5</td>
      <td>2021</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2739</th>
      <td>2021-05-12</td>
      <td>Kg</td>
      <td>30</td>
      <td>35</td>
      <td>32.5</td>
      <td>2021</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2740</th>
      <td>2021-05-13</td>
      <td>Kg</td>
      <td>35</td>
      <td>40</td>
      <td>37.5</td>
      <td>2021</td>
      <td>1</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>2741 rows Ã— 8 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-2eb6c263-93aa-493a-a2d8-ff5e7d243ec5')"
              title="Convert this dataframe to an interactive table."
              style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"/>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/>
  </svg>
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-2eb6c263-93aa-493a-a2d8-ff5e7d243ec5 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-2eb6c263-93aa-493a-a2d8-ff5e7d243ec5');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>





```python
#Hypothesis Test for determining if average tomato prices are different significantly
from scipy.stats import f_oneway

seasonal_data = df.groupby('season')['Average'].mean()
print (seasonal_data)

#Creating dataframe for rows that correlate w spring months, then storing 'Average' values of those rows in array
spring_df = df[df['season'] == '1']
springArr = spring_df['Average'].values

#Creating dataframe for rows that correlate w summer months, then storing 'Average' values of those rows in array
summer_df = df[df['season'] == '2']
summerArr = summer_df['Average'].values

#Creating dataframe for rows that correlate w fall months, then storing 'Average' values of those rows in array
fall_df = df[df['season'] == '3']
fallArr = fall_df['Average'].values

#Creating dataframe for rows that correlate w winter months, then storing 'Average' values of those rows in array
winter_df = df[df['season'] == '4']
winterArr = winter_df['Average'].values

f_value, p_value = f_oneway(springArr,summerArr,fallArr,winterArr)

print("F-value:", f_value)
print("p-value:", p_value)

if p_value < 0.05:
    print("Reject H0, the means of tomato prices across different seasons are significantly different.")
else:
    print("Fail to reject H0, there is no significant difference between means of tomato prices across different seasons.")


```

    season
    1    37.163650
    2    40.856628
    3    46.200286
    4    28.289781
    Name: Average, dtype: float64
    F-value: 159.8026238351687
    p-value: 1.9118485801569532e-95
    Reject H0, the means of tomato prices across different seasons are significantly different.
    


```python
df_plot = df.copy()
seasons = {'1': 'Spring', '2': 'Summer', '3': 'Fall', '4': 'Winter'}
pandemic = {'0': 'Pre-pandemic', '1' : 'Post-Pandemic'}
df_plot['season'] = df_plot['season'].apply(lambda x: seasons[x])
df_plot['pandemic'] = df_plot['pandemic'].apply(lambda x: pandemic[x])
```


```python
# season box plot
df_plot.boxplot(['Minimum', 'Maximum', 'Average'], by='season', figsize=(16,10));
```


    
![png](output_7_0.png)
    



```python
# Pandemic box plot
df_plot.boxplot(['Minimum', 'Maximum', 'Average'], by='pandemic', figsize=(16,10));
```


    
![png](output_8_0.png)
    



```python
# year boxplot
df_plot.boxplot(['Minimum', 'Maximum', 'Average'], by='year', figsize=(16,10));
```


    
![png](output_9_0.png)
    



```python

from scipy import stats
filtered_df = df[['pandemic', 'Average']]

#  Create two separate DataFrames for the pandemic and non-pandemic groups
pandemic = filtered_df[filtered_df['pandemic'] == 1]
non_pandemic = filtered_df[filtered_df['pandemic'] == 0]

# Perform the two-sample t-test
t_stat, p_value = stats.ttest_ind(pandemic['Average'], non_pandemic['Average'])

# Set significance level
alpha = 0.05  

if p_value < alpha:
    print("Reject the null hypothesis: there is a significant difference in price between the two groups.")
else:
    print("Fail to reject the null hypothesis: there is no significant difference in price between the two groups.")
```

    Fail to reject the null hypothesis: there is no significant difference in price between the two groups.
    


```python
fig, axs = plt.subplots(nrows=2, ncols=2)
fig.set_figheight(10)
fig.set_figwidth(16)
pd.plotting.autocorrelation_plot(df_plot['Minimum'], ax = axs[0,0]);
pd.plotting.autocorrelation_plot(df_plot['Maximum'], ax = axs[0,1]);
pd.plotting.autocorrelation_plot(df_plot['Average'], ax = axs[1,0]);
axs[0,0].title.set_text('Minimum')
axs[0,1].title.set_text('Maximum')
axs[1,0].title.set_text('Average')
plt.title('Autocorrelation plots for prices of tomatoes')
fig.delaxes(axs[1,1])
```


    
![png](output_11_0.png)
